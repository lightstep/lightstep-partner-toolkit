extensions:
  health_check:
    endpoint: 0.0.0.0:13133

receivers:
  # Generate traces from the given topology file (env var: TOPO_FILE)
  generator:
    path: "${TOPO_FILE}"
    inline: "${TOPO_INLINE}"

  # Dummy receiver that's never used, because a pipeline is required to have one.
  otlp/spanmetrics:
    protocols:
      grpc:
        endpoint: "localhost:12345"

  otlp:
    protocols:
      http:
        endpoint: 0.0.0.0:58888
        cors_allowed_origins:
          - '*'
      grpc:
        endpoint: 0.0.0.0:55680

processors:
  batch:

  spanmetrics:
    metrics_exporter: otlp
    dimensions:
      - name: http.method

  # Add/remove trace or metric attributes via webhook
  webhook:
    traces_ingress:
      endpoint: 0.0.0.0:7070
    metrics_ingress:
      endpoint: 0.0.0.0:7071

exporters:
  service:
    scraper:
      endpoint: 0.0.0.0:55688
  logging:
  # Export to Lightstep Public Satellites
  otlp:
    endpoint: "${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT}"
    insecure_skip_verify: true
    insecure: "${OTEL_INSECURE}"
    headers:
      "lightstep-access-token": "${LS_ACCESS_TOKEN}"

service:
  extensions: [health_check]
  pipelines:
    metrics:
      receivers:
      - otlp
      - generator
      processors:
      - batch
#     - webhook
      exporters:
      - otlp
      - logging

    metrics/spanmetrics:
      receivers: otlp/spanmetrics
      exporters:
        - otlp
        - logging

    traces:
      receivers:
      - otlp
      - generator
      processors:
      - spanmetrics
      - batch
      - webhook
      exporters:
      - logging
      - otlp
      - service